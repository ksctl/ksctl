// Code generated by goa v3.12.4, DO NOT EDIT.
//
// httpserver HTTP server types
//
// Command:
// $ goa gen github.com/kubesimplify/ksctl/httpserver/design -o httpserver

package server

import (
	httpserver "github.com/kubesimplify/ksctl/httpserver/gen/httpserver"
	goa "goa.design/goa/v3/pkg"
)

// CreateHaRequestBody is the type of the "httpserver" service "create ha"
// endpoint HTTP request body.
type CreateHaRequestBody struct {
	// desired no of workerplane nodes
	NoWp *int `form:"no_wp,omitempty" json:"no_wp,omitempty" xml:"no_wp,omitempty"`
	// desired no of workerplane nodes
	NoCp *int32 `form:"no_cp,omitempty" json:"no_cp,omitempty" xml:"no_cp,omitempty"`
	// desired no of workerplane nodes
	NoDs *int32 `form:"no_ds,omitempty" json:"no_ds,omitempty" xml:"no_ds,omitempty"`
	// desired no of workerplane nodes
	NoMp *int32 `form:"no_mp,omitempty" json:"no_mp,omitempty" xml:"no_mp,omitempty"`
	// virtual machine size for the controlplane
	VMSizeCp *string `form:"vm_size_cp,omitempty" json:"vm_size_cp,omitempty" xml:"vm_size_cp,omitempty"`
	// virtual machine size for the datastore
	VMSizeDs *string `form:"vm_size_ds,omitempty" json:"vm_size_ds,omitempty" xml:"vm_size_ds,omitempty"`
	// virtual machine size for the workerplane
	VMSizeWp *string `form:"vm_size_wp,omitempty" json:"vm_size_wp,omitempty" xml:"vm_size_wp,omitempty"`
	// virtual machine size for the loadbalancer
	VMSizeLb *string `form:"vm_size_lb,omitempty" json:"vm_size_lb,omitempty" xml:"vm_size_lb,omitempty"`
	// Cluster name
	ClusterName *string `form:"cluster_name,omitempty" json:"cluster_name,omitempty" xml:"cluster_name,omitempty"`
	// Region
	Region *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	// cloud provider
	Cloud *string `form:"cloud,omitempty" json:"cloud,omitempty" xml:"cloud,omitempty"`
	// kubernetes distribution
	Distro *string `form:"distro,omitempty" json:"distro,omitempty" xml:"distro,omitempty"`
}

// DeleteHaRequestBody is the type of the "httpserver" service "delete ha"
// endpoint HTTP request body.
type DeleteHaRequestBody struct {
	// desired no of workerplane nodes
	NoWp *int `form:"no_wp,omitempty" json:"no_wp,omitempty" xml:"no_wp,omitempty"`
	// desired no of workerplane nodes
	NoCp *int32 `form:"no_cp,omitempty" json:"no_cp,omitempty" xml:"no_cp,omitempty"`
	// desired no of workerplane nodes
	NoDs *int32 `form:"no_ds,omitempty" json:"no_ds,omitempty" xml:"no_ds,omitempty"`
	// desired no of workerplane nodes
	NoMp *int32 `form:"no_mp,omitempty" json:"no_mp,omitempty" xml:"no_mp,omitempty"`
	// virtual machine size for the controlplane
	VMSizeCp *string `form:"vm_size_cp,omitempty" json:"vm_size_cp,omitempty" xml:"vm_size_cp,omitempty"`
	// virtual machine size for the datastore
	VMSizeDs *string `form:"vm_size_ds,omitempty" json:"vm_size_ds,omitempty" xml:"vm_size_ds,omitempty"`
	// virtual machine size for the workerplane
	VMSizeWp *string `form:"vm_size_wp,omitempty" json:"vm_size_wp,omitempty" xml:"vm_size_wp,omitempty"`
	// virtual machine size for the loadbalancer
	VMSizeLb *string `form:"vm_size_lb,omitempty" json:"vm_size_lb,omitempty" xml:"vm_size_lb,omitempty"`
	// Cluster name
	ClusterName *string `form:"cluster_name,omitempty" json:"cluster_name,omitempty" xml:"cluster_name,omitempty"`
	// Region
	Region *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	// cloud provider
	Cloud *string `form:"cloud,omitempty" json:"cloud,omitempty" xml:"cloud,omitempty"`
	// kubernetes distribution
	Distro *string `form:"distro,omitempty" json:"distro,omitempty" xml:"distro,omitempty"`
}

// ScaledownRequestBody is the type of the "httpserver" service "scaledown"
// endpoint HTTP request body.
type ScaledownRequestBody struct {
	// desired no of workerplane nodes
	NoWp *int `form:"no_wp,omitempty" json:"no_wp,omitempty" xml:"no_wp,omitempty"`
	// desired no of workerplane nodes
	NoCp *int32 `form:"no_cp,omitempty" json:"no_cp,omitempty" xml:"no_cp,omitempty"`
	// desired no of workerplane nodes
	NoDs *int32 `form:"no_ds,omitempty" json:"no_ds,omitempty" xml:"no_ds,omitempty"`
	// desired no of workerplane nodes
	NoMp *int32 `form:"no_mp,omitempty" json:"no_mp,omitempty" xml:"no_mp,omitempty"`
	// virtual machine size for the controlplane
	VMSizeCp *string `form:"vm_size_cp,omitempty" json:"vm_size_cp,omitempty" xml:"vm_size_cp,omitempty"`
	// virtual machine size for the datastore
	VMSizeDs *string `form:"vm_size_ds,omitempty" json:"vm_size_ds,omitempty" xml:"vm_size_ds,omitempty"`
	// virtual machine size for the workerplane
	VMSizeWp *string `form:"vm_size_wp,omitempty" json:"vm_size_wp,omitempty" xml:"vm_size_wp,omitempty"`
	// virtual machine size for the loadbalancer
	VMSizeLb *string `form:"vm_size_lb,omitempty" json:"vm_size_lb,omitempty" xml:"vm_size_lb,omitempty"`
	// Cluster name
	ClusterName *string `form:"cluster_name,omitempty" json:"cluster_name,omitempty" xml:"cluster_name,omitempty"`
	// Region
	Region *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	// cloud provider
	Cloud *string `form:"cloud,omitempty" json:"cloud,omitempty" xml:"cloud,omitempty"`
	// kubernetes distribution
	Distro *string `form:"distro,omitempty" json:"distro,omitempty" xml:"distro,omitempty"`
}

// ScaleupRequestBody is the type of the "httpserver" service "scaleup"
// endpoint HTTP request body.
type ScaleupRequestBody struct {
	// desired no of workerplane nodes
	NoWp *int `form:"no_wp,omitempty" json:"no_wp,omitempty" xml:"no_wp,omitempty"`
	// desired no of workerplane nodes
	NoCp *int32 `form:"no_cp,omitempty" json:"no_cp,omitempty" xml:"no_cp,omitempty"`
	// desired no of workerplane nodes
	NoDs *int32 `form:"no_ds,omitempty" json:"no_ds,omitempty" xml:"no_ds,omitempty"`
	// desired no of workerplane nodes
	NoMp *int32 `form:"no_mp,omitempty" json:"no_mp,omitempty" xml:"no_mp,omitempty"`
	// virtual machine size for the controlplane
	VMSizeCp *string `form:"vm_size_cp,omitempty" json:"vm_size_cp,omitempty" xml:"vm_size_cp,omitempty"`
	// virtual machine size for the datastore
	VMSizeDs *string `form:"vm_size_ds,omitempty" json:"vm_size_ds,omitempty" xml:"vm_size_ds,omitempty"`
	// virtual machine size for the workerplane
	VMSizeWp *string `form:"vm_size_wp,omitempty" json:"vm_size_wp,omitempty" xml:"vm_size_wp,omitempty"`
	// virtual machine size for the loadbalancer
	VMSizeLb *string `form:"vm_size_lb,omitempty" json:"vm_size_lb,omitempty" xml:"vm_size_lb,omitempty"`
	// Cluster name
	ClusterName *string `form:"cluster_name,omitempty" json:"cluster_name,omitempty" xml:"cluster_name,omitempty"`
	// Region
	Region *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	// cloud provider
	Cloud *string `form:"cloud,omitempty" json:"cloud,omitempty" xml:"cloud,omitempty"`
	// kubernetes distribution
	Distro *string `form:"distro,omitempty" json:"distro,omitempty" xml:"distro,omitempty"`
}

// CreateHaResponseBody is the type of the "httpserver" service "create ha"
// endpoint HTTP response body.
type CreateHaResponseBody struct {
	// successful
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
	// reason of failure
	Errors *string `form:"errors,omitempty" json:"errors,omitempty" xml:"errors,omitempty"`
	// response
	Response any `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
}

// DeleteHaResponseBody is the type of the "httpserver" service "delete ha"
// endpoint HTTP response body.
type DeleteHaResponseBody struct {
	// successful
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
	// reason of failure
	Errors *string `form:"errors,omitempty" json:"errors,omitempty" xml:"errors,omitempty"`
	// response
	Response any `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
}

// ScaledownResponseBody is the type of the "httpserver" service "scaledown"
// endpoint HTTP response body.
type ScaledownResponseBody struct {
	// successful
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
	// reason of failure
	Errors *string `form:"errors,omitempty" json:"errors,omitempty" xml:"errors,omitempty"`
	// response
	Response any `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
}

// ScaleupResponseBody is the type of the "httpserver" service "scaleup"
// endpoint HTTP response body.
type ScaleupResponseBody struct {
	// successful
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
	// reason of failure
	Errors *string `form:"errors,omitempty" json:"errors,omitempty" xml:"errors,omitempty"`
	// response
	Response any `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
}

// GetHealthResponseBody is the type of the "httpserver" service "get health"
// endpoint HTTP response body.
type GetHealthResponseBody struct {
	// message
	Msg *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
}

// GetClustersResponseBody is the type of the "httpserver" service "get
// clusters" endpoint HTTP response body.
type GetClustersResponseBody struct {
	// successful
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
	// reason of failure
	Errors *string `form:"errors,omitempty" json:"errors,omitempty" xml:"errors,omitempty"`
	// response
	Response any `form:"response,omitempty" json:"response,omitempty" xml:"response,omitempty"`
}

// NewCreateHaResponseBody builds the HTTP response body from the result of the
// "create ha" endpoint of the "httpserver" service.
func NewCreateHaResponseBody(res *httpserver.Response) *CreateHaResponseBody {
	body := &CreateHaResponseBody{
		OK:       res.OK,
		Errors:   res.Errors,
		Response: res.Response,
	}
	return body
}

// NewDeleteHaResponseBody builds the HTTP response body from the result of the
// "delete ha" endpoint of the "httpserver" service.
func NewDeleteHaResponseBody(res *httpserver.Response) *DeleteHaResponseBody {
	body := &DeleteHaResponseBody{
		OK:       res.OK,
		Errors:   res.Errors,
		Response: res.Response,
	}
	return body
}

// NewScaledownResponseBody builds the HTTP response body from the result of
// the "scaledown" endpoint of the "httpserver" service.
func NewScaledownResponseBody(res *httpserver.Response) *ScaledownResponseBody {
	body := &ScaledownResponseBody{
		OK:       res.OK,
		Errors:   res.Errors,
		Response: res.Response,
	}
	return body
}

// NewScaleupResponseBody builds the HTTP response body from the result of the
// "scaleup" endpoint of the "httpserver" service.
func NewScaleupResponseBody(res *httpserver.Response) *ScaleupResponseBody {
	body := &ScaleupResponseBody{
		OK:       res.OK,
		Errors:   res.Errors,
		Response: res.Response,
	}
	return body
}

// NewGetHealthResponseBody builds the HTTP response body from the result of
// the "get health" endpoint of the "httpserver" service.
func NewGetHealthResponseBody(res *httpserver.Health) *GetHealthResponseBody {
	body := &GetHealthResponseBody{
		Msg: res.Msg,
	}
	return body
}

// NewGetClustersResponseBody builds the HTTP response body from the result of
// the "get clusters" endpoint of the "httpserver" service.
func NewGetClustersResponseBody(res *httpserver.Response) *GetClustersResponseBody {
	body := &GetClustersResponseBody{
		OK:       res.OK,
		Errors:   res.Errors,
		Response: res.Response,
	}
	return body
}

// NewCreateHaMetadata builds a httpserver service create ha endpoint payload.
func NewCreateHaMetadata(body *CreateHaRequestBody) *httpserver.Metadata {
	v := &httpserver.Metadata{
		NoWp:        body.NoWp,
		NoCp:        body.NoCp,
		NoDs:        body.NoDs,
		NoMp:        body.NoMp,
		VMSizeCp:    body.VMSizeCp,
		VMSizeDs:    body.VMSizeDs,
		VMSizeWp:    body.VMSizeWp,
		VMSizeLb:    body.VMSizeLb,
		ClusterName: *body.ClusterName,
		Region:      *body.Region,
		Cloud:       *body.Cloud,
		Distro:      *body.Distro,
	}

	return v
}

// NewDeleteHaMetadata builds a httpserver service delete ha endpoint payload.
func NewDeleteHaMetadata(body *DeleteHaRequestBody) *httpserver.Metadata {
	v := &httpserver.Metadata{
		NoWp:        body.NoWp,
		NoCp:        body.NoCp,
		NoDs:        body.NoDs,
		NoMp:        body.NoMp,
		VMSizeCp:    body.VMSizeCp,
		VMSizeDs:    body.VMSizeDs,
		VMSizeWp:    body.VMSizeWp,
		VMSizeLb:    body.VMSizeLb,
		ClusterName: *body.ClusterName,
		Region:      *body.Region,
		Cloud:       *body.Cloud,
		Distro:      *body.Distro,
	}

	return v
}

// NewScaledownMetadata builds a httpserver service scaledown endpoint payload.
func NewScaledownMetadata(body *ScaledownRequestBody) *httpserver.Metadata {
	v := &httpserver.Metadata{
		NoWp:        body.NoWp,
		NoCp:        body.NoCp,
		NoDs:        body.NoDs,
		NoMp:        body.NoMp,
		VMSizeCp:    body.VMSizeCp,
		VMSizeDs:    body.VMSizeDs,
		VMSizeWp:    body.VMSizeWp,
		VMSizeLb:    body.VMSizeLb,
		ClusterName: *body.ClusterName,
		Region:      *body.Region,
		Cloud:       *body.Cloud,
		Distro:      *body.Distro,
	}

	return v
}

// NewScaleupMetadata builds a httpserver service scaleup endpoint payload.
func NewScaleupMetadata(body *ScaleupRequestBody) *httpserver.Metadata {
	v := &httpserver.Metadata{
		NoWp:        body.NoWp,
		NoCp:        body.NoCp,
		NoDs:        body.NoDs,
		NoMp:        body.NoMp,
		VMSizeCp:    body.VMSizeCp,
		VMSizeDs:    body.VMSizeDs,
		VMSizeWp:    body.VMSizeWp,
		VMSizeLb:    body.VMSizeLb,
		ClusterName: *body.ClusterName,
		Region:      *body.Region,
		Cloud:       *body.Cloud,
		Distro:      *body.Distro,
	}

	return v
}

// ValidateCreateHaRequestBody runs the validations defined on Create
// HaRequestBody
func ValidateCreateHaRequestBody(body *CreateHaRequestBody) (err error) {
	if body.ClusterName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cluster_name", "body"))
	}
	if body.Region == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("region", "body"))
	}
	if body.Cloud == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cloud", "body"))
	}
	if body.Distro == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("distro", "body"))
	}
	if body.NoWp != nil {
		if *body.NoWp < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_wp", *body.NoWp, 0, true))
		}
	}
	if body.NoCp != nil {
		if *body.NoCp < 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_cp", *body.NoCp, 3, true))
		}
	}
	if body.NoCp != nil {
		if *body.NoCp > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_cp", *body.NoCp, 10, false))
		}
	}
	if body.NoDs != nil {
		if *body.NoDs < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_ds", *body.NoDs, 1, true))
		}
	}
	if body.NoDs != nil {
		if *body.NoDs > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_ds", *body.NoDs, 3, false))
		}
	}
	if body.NoMp != nil {
		if *body.NoMp < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_mp", *body.NoMp, 1, true))
		}
	}
	if body.NoMp != nil {
		if *body.NoMp > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_mp", *body.NoMp, 3, false))
		}
	}
	return
}

// ValidateDeleteHaRequestBody runs the validations defined on Delete
// HaRequestBody
func ValidateDeleteHaRequestBody(body *DeleteHaRequestBody) (err error) {
	if body.ClusterName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cluster_name", "body"))
	}
	if body.Region == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("region", "body"))
	}
	if body.Cloud == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cloud", "body"))
	}
	if body.Distro == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("distro", "body"))
	}
	if body.NoWp != nil {
		if *body.NoWp < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_wp", *body.NoWp, 0, true))
		}
	}
	if body.NoCp != nil {
		if *body.NoCp < 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_cp", *body.NoCp, 3, true))
		}
	}
	if body.NoCp != nil {
		if *body.NoCp > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_cp", *body.NoCp, 10, false))
		}
	}
	if body.NoDs != nil {
		if *body.NoDs < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_ds", *body.NoDs, 1, true))
		}
	}
	if body.NoDs != nil {
		if *body.NoDs > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_ds", *body.NoDs, 3, false))
		}
	}
	if body.NoMp != nil {
		if *body.NoMp < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_mp", *body.NoMp, 1, true))
		}
	}
	if body.NoMp != nil {
		if *body.NoMp > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_mp", *body.NoMp, 3, false))
		}
	}
	return
}

// ValidateScaledownRequestBody runs the validations defined on
// ScaledownRequestBody
func ValidateScaledownRequestBody(body *ScaledownRequestBody) (err error) {
	if body.ClusterName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cluster_name", "body"))
	}
	if body.Region == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("region", "body"))
	}
	if body.Cloud == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cloud", "body"))
	}
	if body.Distro == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("distro", "body"))
	}
	if body.NoWp != nil {
		if *body.NoWp < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_wp", *body.NoWp, 0, true))
		}
	}
	if body.NoCp != nil {
		if *body.NoCp < 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_cp", *body.NoCp, 3, true))
		}
	}
	if body.NoCp != nil {
		if *body.NoCp > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_cp", *body.NoCp, 10, false))
		}
	}
	if body.NoDs != nil {
		if *body.NoDs < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_ds", *body.NoDs, 1, true))
		}
	}
	if body.NoDs != nil {
		if *body.NoDs > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_ds", *body.NoDs, 3, false))
		}
	}
	if body.NoMp != nil {
		if *body.NoMp < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_mp", *body.NoMp, 1, true))
		}
	}
	if body.NoMp != nil {
		if *body.NoMp > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_mp", *body.NoMp, 3, false))
		}
	}
	return
}

// ValidateScaleupRequestBody runs the validations defined on ScaleupRequestBody
func ValidateScaleupRequestBody(body *ScaleupRequestBody) (err error) {
	if body.ClusterName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cluster_name", "body"))
	}
	if body.Region == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("region", "body"))
	}
	if body.Cloud == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cloud", "body"))
	}
	if body.Distro == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("distro", "body"))
	}
	if body.NoWp != nil {
		if *body.NoWp < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_wp", *body.NoWp, 0, true))
		}
	}
	if body.NoCp != nil {
		if *body.NoCp < 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_cp", *body.NoCp, 3, true))
		}
	}
	if body.NoCp != nil {
		if *body.NoCp > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_cp", *body.NoCp, 10, false))
		}
	}
	if body.NoDs != nil {
		if *body.NoDs < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_ds", *body.NoDs, 1, true))
		}
	}
	if body.NoDs != nil {
		if *body.NoDs > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_ds", *body.NoDs, 3, false))
		}
	}
	if body.NoMp != nil {
		if *body.NoMp < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_mp", *body.NoMp, 1, true))
		}
	}
	if body.NoMp != nil {
		if *body.NoMp > 3 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.no_mp", *body.NoMp, 3, false))
		}
	}
	return
}
