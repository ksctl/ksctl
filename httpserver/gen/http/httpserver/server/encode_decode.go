// Code generated by goa v3.12.4, DO NOT EDIT.
//
// httpserver HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/kubesimplify/ksctl/httpserver/design -o httpserver

package server

import (
	"context"
	"io"
	"net/http"

	httpserver "github.com/kubesimplify/ksctl/httpserver/gen/httpserver"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateHaResponse returns an encoder for responses returned by the
// httpserver create ha endpoint.
func EncodeCreateHaResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*httpserver.Response)
		enc := encoder(ctx, w)
		body := NewCreateHaResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateHaRequest returns a decoder for requests sent to the httpserver
// create ha endpoint.
func DecodeCreateHaRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateHaRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateHaRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateHaMetadata(&body)

		return payload, nil
	}
}

// EncodeDeleteHaResponse returns an encoder for responses returned by the
// httpserver delete ha endpoint.
func EncodeDeleteHaResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*httpserver.Response)
		enc := encoder(ctx, w)
		body := NewDeleteHaResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteHaRequest returns a decoder for requests sent to the httpserver
// delete ha endpoint.
func DecodeDeleteHaRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body DeleteHaRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDeleteHaRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewDeleteHaMetadata(&body)

		return payload, nil
	}
}

// EncodeScaledownResponse returns an encoder for responses returned by the
// httpserver scaledown endpoint.
func EncodeScaledownResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*httpserver.Response)
		enc := encoder(ctx, w)
		body := NewScaledownResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeScaledownRequest returns a decoder for requests sent to the httpserver
// scaledown endpoint.
func DecodeScaledownRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body ScaledownRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateScaledownRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewScaledownMetadata(&body)

		return payload, nil
	}
}

// EncodeScaleupResponse returns an encoder for responses returned by the
// httpserver scaleup endpoint.
func EncodeScaleupResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*httpserver.Response)
		enc := encoder(ctx, w)
		body := NewScaleupResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeScaleupRequest returns a decoder for requests sent to the httpserver
// scaleup endpoint.
func DecodeScaleupRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body ScaleupRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateScaleupRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewScaleupMetadata(&body)

		return payload, nil
	}
}

// EncodeGetHealthResponse returns an encoder for responses returned by the
// httpserver get health endpoint.
func EncodeGetHealthResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*httpserver.Health)
		enc := encoder(ctx, w)
		body := NewGetHealthResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetClustersResponse returns an encoder for responses returned by the
// httpserver get clusters endpoint.
func EncodeGetClustersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*httpserver.Response)
		enc := encoder(ctx, w)
		body := NewGetClustersResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}
