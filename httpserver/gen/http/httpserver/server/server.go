// Code generated by goa v3.12.4, DO NOT EDIT.
//
// httpserver HTTP server
//
// Command:
// $ goa gen github.com/kubesimplify/ksctl/httpserver/design -o httpserver

package server

import (
	"context"
	"net/http"

	httpserver "github.com/kubesimplify/ksctl/httpserver/gen/httpserver"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the httpserver service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	GetHealth           http.Handler
	GenHTTPOpenapi3JSON http.Handler
	Swaggerui           http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the httpserver service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *httpserver.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
	fileSystemGenHTTPOpenapi3JSON http.FileSystem,
	fileSystemSwaggerui http.FileSystem,
) *Server {
	if fileSystemGenHTTPOpenapi3JSON == nil {
		fileSystemGenHTTPOpenapi3JSON = http.Dir(".")
	}
	if fileSystemSwaggerui == nil {
		fileSystemSwaggerui = http.Dir(".")
	}
	return &Server{
		Mounts: []*MountPoint{
			{"GetHealth", "GET", "/healthz"},
			{"./gen/http/openapi3.json", "GET", "/openapi3.json"},
			{"./swaggerui", "GET", "/swaggerui"},
		},
		GetHealth:           NewGetHealthHandler(e.GetHealth, mux, decoder, encoder, errhandler, formatter),
		GenHTTPOpenapi3JSON: http.FileServer(fileSystemGenHTTPOpenapi3JSON),
		Swaggerui:           http.FileServer(fileSystemSwaggerui),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "httpserver" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetHealth = m(s.GetHealth)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return httpserver.MethodNames[:] }

// Mount configures the mux to serve the httpserver endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetHealthHandler(mux, h.GetHealth)
	MountGenHTTPOpenapi3JSON(mux, goahttp.Replace("", "/./gen/http/openapi3.json", h.GenHTTPOpenapi3JSON))
	MountSwaggerui(mux, goahttp.Replace("/swaggerui", "/./swaggerui", h.Swaggerui))
}

// Mount configures the mux to serve the httpserver endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetHealthHandler configures the mux to serve the "httpserver" service
// "get health" endpoint.
func MountGetHealthHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/healthz", f)
}

// NewGetHealthHandler creates a HTTP handler which loads the HTTP request and
// calls the "httpserver" service "get health" endpoint.
func NewGetHealthHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetHealthResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get health")
		ctx = context.WithValue(ctx, goa.ServiceKey, "httpserver")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGenHTTPOpenapi3JSON configures the mux to serve GET request made to
// "/openapi3.json".
func MountGenHTTPOpenapi3JSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi3.json", h.ServeHTTP)
}

// MountSwaggerui configures the mux to serve GET request made to "/swaggerui".
func MountSwaggerui(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/swaggerui/", h.ServeHTTP)
	mux.Handle("GET", "/swaggerui/*path", h.ServeHTTP)
}
