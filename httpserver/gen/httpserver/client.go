// Code generated by goa v3.12.4, DO NOT EDIT.
//
// httpserver client
//
// Command:
// $ goa gen github.com/kubesimplify/ksctl/httpserver/design -o httpserver

package httpserver

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "httpserver" service client.
type Client struct {
	CreateHaEndpoint    goa.Endpoint
	DeleteHaEndpoint    goa.Endpoint
	ScaledownEndpoint   goa.Endpoint
	ScaleupEndpoint     goa.Endpoint
	GetHealthEndpoint   goa.Endpoint
	GetClustersEndpoint goa.Endpoint
}

// NewClient initializes a "httpserver" service client given the endpoints.
func NewClient(createHa, deleteHa, scaledown, scaleup, getHealth, getClusters goa.Endpoint) *Client {
	return &Client{
		CreateHaEndpoint:    createHa,
		DeleteHaEndpoint:    deleteHa,
		ScaledownEndpoint:   scaledown,
		ScaleupEndpoint:     scaleup,
		GetHealthEndpoint:   getHealth,
		GetClustersEndpoint: getClusters,
	}
}

// CreateHa calls the "create ha" endpoint of the "httpserver" service.
func (c *Client) CreateHa(ctx context.Context, p *Metadata) (res *Response, err error) {
	var ires any
	ires, err = c.CreateHaEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Response), nil
}

// DeleteHa calls the "delete ha" endpoint of the "httpserver" service.
func (c *Client) DeleteHa(ctx context.Context, p *Metadata) (res *Response, err error) {
	var ires any
	ires, err = c.DeleteHaEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Response), nil
}

// Scaledown calls the "scaledown" endpoint of the "httpserver" service.
func (c *Client) Scaledown(ctx context.Context, p *Metadata) (res *Response, err error) {
	var ires any
	ires, err = c.ScaledownEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Response), nil
}

// Scaleup calls the "scaleup" endpoint of the "httpserver" service.
func (c *Client) Scaleup(ctx context.Context, p *Metadata) (res *Response, err error) {
	var ires any
	ires, err = c.ScaleupEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Response), nil
}

// GetHealth calls the "get health" endpoint of the "httpserver" service.
func (c *Client) GetHealth(ctx context.Context) (res *Health, err error) {
	var ires any
	ires, err = c.GetHealthEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*Health), nil
}

// GetClusters calls the "get clusters" endpoint of the "httpserver" service.
func (c *Client) GetClusters(ctx context.Context) (res *Response, err error) {
	var ires any
	ires, err = c.GetClustersEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*Response), nil
}
