
## THis is a userinput
CONTROLLER ?= ADD_YOUR_CONTROLLER

allowed_controllers = application
# allowed_controllers = storage application

ENVTEST_K8S_VERSION = 1.30.0

CONTROLLER_IMG = ghcr.io/ksctl/ksctl-${CONTROLLER}-controller:${IMG_TAG_VERSION}

WORKDIR = ksctl-components/operators/${CONTROLLER}

# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)
ifeq (,$(shell go env GOBIN))
GOBIN=$(shell go env GOPATH)/bin
else
GOBIN=$(shell go env GOBIN)
endif

check-controller:
ifneq ($(findstring $(CONTROLLER),$(allowed_controllers)),)
	@echo "Variable CONTROLLER $(CONTROLLER) is valid"
else
	$(error Variable `CONTROLLER=$(CONTROLLER)` is not allowed. Allowed values are: `$(allowed_controllers)`)
endif


# CONTAINER_TOOL defines the container tool to be used for building images.
# Be aware that the target commands are only tested with Docker which is
# scaffolded by default. However, you might want to replace it to use other
# tools. (i.e. podman)
CONTAINER_TOOL ?= docker

# Setting SHELL to bash allows bash commands to be executed by recipes.
# Options are set to exit when a recipe line exits non-zero or a piped command fails.
SHELL = /usr/bin/env bash -o pipefail
.SHELLFLAGS = -ec


##@ Development (Controller)

.PHONY: manifests
manifests: check-controller controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.
	cd ${WORKDIR} && \
		$(CONTROLLER_GEN) rbac:roleName=manager-role crd webhook paths="./..." output:crd:artifacts:config=config/crd/bases

.PHONY: generate
generate: check-controller controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.
	cd ${WORKDIR} && \
		$(CONTROLLER_GEN) object:headerFile="hack/boilerplate.go.txt" paths="./..."

.PHONY: fmt
fmt: check-controller ## Run go fmt against code.
	cd ${WORKDIR} && \
		go fmt ./...

.PHONY: vet
vet: check-controller ## Run go vet against code.
	cd ${WORKDIR} && \
		go vet ./...

.PHONY: lint-controller
lint-controller: check-controller golangci-lint ## Run golangci-lint linter & yamllint
	cd ${WORKDIR} && \
	$(GOLANGCI_LINT) run --timeout 10m


.PHONY: lint-fix-controller
lint-fix-controller:check-controller golangci-lint ## Run golangci-lint linter and perform fixes
	cd ${WORKDIR} && \
	$(GOLANGCI_LINT) run --fix

##@ Test (Controller)

.PHONY: test-controller
test-controller: check-controller manifests generate fmt vet envtest ## Run tests.
	cd ${WORKDIR} && \
	KUBEBUILDER_ASSETS="$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) --bin-dir $(LOCALBIN) -p path)" go test -v $$(go list ./... | grep -v /e2e) -coverprofile ../../../coverage-${CONTROLLER}.out

# Utilize Kind or modify the e2e tests to load the image locally, enabling compatibility with other vendors.
# .PHONY: test-controller-e2e  # Run the e2e tests against a Kind k8s instance that is spun up.
# test-controller-e2e: check-controller
# 	cd ${WORKDIR} && \
# 	go test ./test/e2e/ -v -ginkgo.v


##@ Builder and Generator (Controller)

.PHONY: docker-build-controller
docker-build-controller: check-controller ## Build docker image with the manager.
	$(CONTAINER_TOOL) build \
		--file build/controllers/Dockerfile \
		--build-arg="TARGET_CONTROLLER=${CONTROLLER}"\
		--build-arg="GO_VERSION=1.22" \
		--platform="linux/amd64" \
		--tag ${CONTROLLER_IMG} .


.PHONY: docker-push-controller
docker-push-controller:check-controller  ## Push docker image for ksctl controller
	$(CONTAINER_TOOL) push ${CONTROLLER_IMG}


# PLATFORMS defines the target platforms for the manager image be built to provide support to multiple
# architectures. (i.e. make docker-buildx IMG=myregistry/mypoperator:0.0.1). To use this option you need to:
# - be able to use docker buildx. More info: https://docs.docker.com/build/buildx/
# - have enabled BuildKit. More info: https://docs.docker.com/develop/develop-images/build_enhancements/
# - be able to push the image to your registry (i.e. if you do not set a valid value via IMG=<myregistry/image:<tag>> then the export will fail)
# To adequately provide solutions that are compatible with multiple platforms, you should consider using this option.
PLATFORMS ?= linux/arm64,linux/amd64
.PHONY: docker-buildx-controller
docker-buildx-controller: check-controller ## Build and push docker image for the manager for cross-platform support
	- $(CONTAINER_TOOL) buildx create --name project-v3-builder || exit 1
	$(CONTAINER_TOOL) buildx use project-v3-builder || exit 1
	- $(CONTAINER_TOOL) buildx build --push --platform=$(PLATFORMS) --build-arg="GO_VERSION=1.22" --build-arg="TARGET_CONTROLLER=${CONTROLLER}" --tag ${CONTROLLER_IMG} -f build/controllers/Dockerfile . || exit 1
	- $(CONTAINER_TOOL) buildx rm project-v3-builder


.PHONY: build-installer
build-installer: check-controller manifests generate kustomize ## Generate a consolidated YAML with CRDs and deployment.
	@echo "Building installer for ${CONTROLLER} with controller image ${CONTROLLER_IMG}"
	@echo "make sure the controller image tag is correctly set using IMG_TAG_VERSION"
	cd ${WORKDIR}/config/manager && $(KUSTOMIZE) edit set image controller=${CONTROLLER_IMG}
	$(KUSTOMIZE) build ${WORKDIR}/config/default > ksctl-components/manifests/controllers/${CONTROLLER}/deploy.yml


##@ Deployment (Controller)

ifndef ignore-not-found
  ignore-not-found = false
endif


.PHONY: deploy
deploy: check-controller ## Deploy controller to the K8s cluster specified in ~/.kube/config.
	$(KUBECTL) apply -f ksctl-components/manifests/controllers/${CONTROLLER}/deploy.yml

.PHONY: undeploy
undeploy: check-controller kustomize ## Undeploy controller from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.
	$(KUSTOMIZE) build ${WORKDIR}/config/default | $(KUBECTL) delete --ignore-not-found=$(ignore-not-found) -f -

.PHONY: build
build: check-controller manifests generate fmt vet ## Build manager binary.
	cd ${WORKDIR} && \
		go build -o bin/manager cmd/main.go

.PHONY: install-controller-crds
install-controller-crds: check-controller manifests kustomize ## Install CRDs to the K8s cluster specified in ~/.kube/config.
	cd ${WORKDIR} && $(KUSTOMIZE) build config/crd | $(KUBECTL) apply -f -

.PHONY: uninstall-controller-crds
uninstall-controller-crds: check-controller manifests kustomize ## Uninstall CRDs from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.
	cd ${WORKDIR} && $(KUSTOMIZE) build config/crd | $(KUBECTL) delete --ignore-not-found=$(ignore-not-found) -f -

.PHONY: run
run: check-controller manifests generate fmt vet ## Run a controller from your host.
	cd ${WORKDIR} && \
		go run ./cmd/main.go


##@ Dependencies (Controller)

## Location to install dependencies to
LOCALBIN ?= /tmp/bin
$(LOCALBIN):
	mkdir -p $(LOCALBIN)

## Tool Binaries
KUBECTL ?= kubectl
KUSTOMIZE ?= $(LOCALBIN)/kustomize-$(KUSTOMIZE_VERSION)
CONTROLLER_GEN ?= $(LOCALBIN)/controller-gen-$(CONTROLLER_TOOLS_VERSION)
ENVTEST ?= $(LOCALBIN)/setup-envtest-$(ENVTEST_VERSION)
GOLANGCI_LINT = $(LOCALBIN)/golangci-lint-$(GOLANGCI_LINT_VERSION)
GO_TEST_COLOR ?= $(LOCALBIN)/gotest-$(GO_TEST_VERSION)

## Tool Versions
KUSTOMIZE_VERSION ?= v5.3.0
CONTROLLER_TOOLS_VERSION ?= v0.15.0
ENVTEST_VERSION ?= release-0.17
GOLANGCI_LINT_VERSION ?= v1.54.2
GO_TEST_VERSION ?= v0.0.6

.PHONY: kustomize
kustomize: $(KUSTOMIZE) ## Download kustomize locally if necessary.
$(KUSTOMIZE): $(LOCALBIN)
	$(call go-install-tool,$(KUSTOMIZE),sigs.k8s.io/kustomize/kustomize/v5,$(KUSTOMIZE_VERSION))

.PHONY: controller-gen
controller-gen: $(CONTROLLER_GEN) ## Download controller-gen locally if necessary.
$(CONTROLLER_GEN): $(LOCALBIN)
	$(call go-install-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen,$(CONTROLLER_TOOLS_VERSION))

.PHONY: envtest
envtest: $(ENVTEST) ## Download setup-envtest locally if necessary.
$(ENVTEST): $(LOCALBIN)
	$(call go-install-tool,$(ENVTEST),sigs.k8s.io/controller-runtime/tools/setup-envtest,$(ENVTEST_VERSION))

.PHONY: golangci-lint
golangci-lint: $(GOLANGCI_LINT) ## Download golangci-lint locally if necessary.
$(GOLANGCI_LINT): $(LOCALBIN)
	$(call go-install-tool,$(GOLANGCI_LINT),github.com/golangci/golangci-lint/cmd/golangci-lint,${GOLANGCI_LINT_VERSION})

.PHONY: golang-test
golang-test: $(GO_TEST_COLOR) ## Downloading gotest
$(GO_TEST_COLOR): $(LOCALBIN)
	$(call go-install-tool,$(GO_TEST_COLOR),github.com/rakyll/gotest,${GO_TEST_VERSION})

# go-install-tool will 'go install' any package with custom target and name of binary, if it doesn't exist
# $1 - target path with name of binary (ideally with version)
# $2 - package url which can be installed
# $3 - specific version of package
define go-install-tool
@[ -f $(1) ] || { \
set -e; \
package=$(2)@$(3) ;\
echo "Downloading $${package}" ;\
GOBIN=$(LOCALBIN) go install $${package} ;\
mv "$$(echo "$(1)" | sed "s/-$(3)$$//")" $(1) ;\
}
endef
